import React, { useState, useLayoutEffect, useRef } from "react";
import ReactDOM from "react-dom";
import { Autocomplete } from "@yazanaabed/react-autocomplete";
import "./App.css";
import SearchIcon from "./utils/search-icon.png";
import CloseIcon from "./utils/close-icon.png";

const json = require("./data.json");
const res = Object.entries(json).map(
  ([key, { id, identifier, risk, description }]) => {
    return {
      id: id,
      identifier: identifier,
      risk: risk,
      description: description
    };
  }
);

const App = () => {
  const [items] = useState(res);
  const [selectedItem, setSelectedItem] = useState([]);
  const [selection, setSelection] = useState([]);
  const [isOpen, setOpen] = useState(false);
  const mainContainer = useRef(0);
  const searchContainer = useRef(0);
  const inputSearch = useRef(0);
  let lastFocusedElement;

  const filterItemsBySearchInput = (inputValue) => {
    return items.filter(
      (item) =>
        !inputValue ||
        item.identifier.toLowerCase().includes(inputValue.toLowerCase())
    );
  };

  const onSelectedItemChanged = (selection) => {
    setSelection([...selectedItem]);
    let isItemFound = selectedItem.find((item) => item.id === selection.id);

    if (!isItemFound) {
      selectedItem.push(selection);
    }

    return selectedItem;
  };

  const handleDelete = (index) => {
    setSelectedItem((items) => items.filter((item, i) => i !== index));
  };

  useLayoutEffect(() => {
    openSearch();
    const node = mainContainer.current;
    node.addEventListener("keyup", function (ev) {
      if (ev.keyCode === 27) {
        closeSearch();
      }
    });
    openSearch();
    closeSearch();
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  const openSearch = () => {
    lastFocusedElement = document.activeElement;
    mainContainer.current.classList.add("main-wrap--overlay");
    searchContainer.current.classList.add("search--open");
    setOpen(true);
    inputSearch.current.focus();
  };

  const closeSearch = () => {
    setOpen(false);
    mainContainer.current.classList.remove("main-wrap--overlay");
    searchContainer.current.classList.remove("search--open");
    inputSearch.current.blur();
    inputSearch.current.value = "";
    if (lastFocusedElement) {
      lastFocusedElement.focus();
    }
  };

  return (
    <div ref={mainContainer} className="main-wrap main-wrap--overlay">
      <header className="header">
        <h1 className="header__title">Search Vulnerability Database</h1>
        <div className="search-wrap">
          {isOpen ? (
            <button
              id="btn-search-close"
              className={"btn btn--search-close"}
              aria-label="Close search form"
              onClick={closeSearch}
            >
              <img alt="close-icon" src={CloseIcon} />
            </button>
          ) : (
            <button
              id="btn-search"
              className={"btn btn--search"}
              onClick={openSearch}
            >
              <img alt="search-icon" src={SearchIcon} />
            </button>
          )}
        </div>
      </header>
      <div ref={searchContainer} className="search search--open">
        <div className="search__inner">
          <form className="search__form" action="">
            <Autocomplete
              onChange={(selection) => onSelectedItemChanged(selection)}
            >
              {({ getItemProps, getInputProps, inputValue, isOpen }) => {
                let filteredItems = filterItemsBySearchInput(inputValue);
                return (
                  <div>
                    <input
                      type="text"
                      ref={inputSearch}
                      className="search__input"
                      name="search"
                      placeholder="Search"
                      autoComplete="off"
                      autoCorrect="off"
                      autoCapitalize="off"
                      spellCheck="false"
                      {...getInputProps({
                        className: "search__input"
                      })}
                    />
                    {isOpen ? (
                      <ul className="input__list">
                        {filteredItems.map((item, index) => (
                          <li
                            {...getItemProps({ item, index })}
                            className="input__li"
                          >
                            {item.identifier}
                          </li>
                        ))}
                      </ul>
                    ) : null}
                  </div>
                );
              }}
            </Autocomplete>
            <span className="search__info">
              Hit enter to search or ESC to close
            </span>
          </form>
          <div className="search__related">
            <div className="search__suggestion">
              <h3>May We Suggest?</h3>
              <p>
                #drone #funny #catgif #broken #lost #hilarious #good #red #blue
                #nono #why #yes #yesyes #aliens #green
              </p>
            </div>
          </div>
        </div>
      </div>
      <ul>
        {selectedItem.map((item, index) => (
          <li key={index} className="searched__list">
            <button
              type="button"
              onClick={() => handleDelete(index)}
              className="btn"
            >
              <img alt="close-icon" src={CloseIcon} className="btn__searched" />
            </button>
            <h2>{item.identifier}</h2>
            {item.description}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default App;
const rootElement = document.getElementById("root");
ReactDOM.render(<App />, rootElement);